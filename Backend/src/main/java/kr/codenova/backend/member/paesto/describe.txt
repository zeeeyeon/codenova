PAESTO(Platform-Agnostic Security Tokens)는
JWT(JSON Web Tokens)의 대안으로 설계된 보안 토큰 형식이다.

PAESTO는 다음과 같은 주요 특징을 가지고 있다.

1. 플랫폼 독립적 설계 - 다양한 환경에서 일관되게 작동하도록 만들어짐
2. 강력한 보안 - 현대적인 암호화 방식을 사용하여 설계됨
3. 단순성 - 개발자가 실수하기 어려운 명확한 사용법 제공

PAESTO는 "version.purpose.payload.footer"의 형식을 따르며, 버전에 따라 다른 암호화 알고리즘을 사용한다.

주요 목적(purpose)으로는 "local"(암호화와 인증) 또는 "public"(서명)이 있다.

JWT와 비교했을 때, PAESTO는 알고리즘 협상을 제거하고 더 엄격한 보안 사양을 제공하여 JWT에서 발생할 수 있는
많은 보안 취약점을 방지한다.

PAESTO는 플랫폼에 구애받지 않도록 설계되었기 때문에 다양한 프로그래밍 언어로 구현할 수 있다.
여러 언어에 대한 라이브러리가 존재한다.

1. PHP - 원래 참조 구현이 PHP로 만들어졌음
2. JavaScript/Node.js - 여러 구현체 있음
3. Go - 널리 사용되는 구현체 있음
4. Rust - 안전한 구현체 제공
5. Java - JVM 환경을 위한 구현체
6. Python - 파이썬 애플리케이션용 라이브러리
7. Ruby - 루비 웹 애플리케이션을 위한 구현체
8. .NET/C# - 마이크로소프트 플랫폼용 라이브러리

이러한 다양한 언어 지원은 PAESTO의 "Platfrom-Agnostic"(플랫폼 독립적) 특성을 잘 보여준다.


< 자바로 구현하는 방법 >
1. paseto4j - 자바로 작성된 PAESTO 구현체 중 하나로, 기본적인 PASETO 기능을 제공함
2. jpaesto - 더 활발하게 유지보수되는 자바 구현체로, Tink 라이브러리를 사용하여 암호화 작업을 처리함
3. paesto-java - 자바 8 이상을 지원하는 또 다른 구현체

-> jpaesto 사용하자.

1. 의존성 추가
2. PASETO 토큰 서비스 구현
3. Spring Security와 통합
4. 로그인 컨트롤러 구현


< PASETO vs JWT 구현 차이점 >
1. 알고리즘 선택 없음 - 버전에 따라 암호화 알고리즘이 이미 결정되어 있어 "none" 알고리즘과 같은 취약점이 없습니다.
2. 강제된 암호화 - PASETO의 "local" 모드는 항상 데이터를 암호화하고 인증합니다.
3. 명확한 용도 - 버전과 목적(public/local)이 명확히 구분되어 있어 오용 가능성이 적습니다.


< Local과 Public의 목적 >
PASETO는 두 가지 주요 목적(purposes)을 구분합니다.

Local
- 용도 : 서버 내부에서만 읽을 수 있는 토큰을 생성할 때 사용
- 작동 방식 : 대칭 암호화 사용 (동일한 비밀키로 암호화 및 복호화)
- 특징
    - 페이로드를 암호화하고 인증합니다.
    - 서버만 알고 있는 비밀키가 필요합니다.
    - 세션 데이터, 개인 정보 등 민감한 정보를 담을 때 적합합니다.

Public
- 용도 : 누구나 검증할 수 있지만 서명된 서버만 생성할 수 있는 토큰을 위해 사용
- 작동방식 : 비대칭 암호화 사용 (개인키로 서명, 공개키로 검증)
- 특징
    - 페이로드를 서명만 하고 암호화하지 않습니다. (내용 공개)
    - OAuth2와 같은 공개 인증 시스템에 적합합니다.
    - 마이크로서비스 간 통신에서 출처 검증을 위해 사용할 수 있습니다.

< Spring Security와의 통합 >
Spring Security와 PASETO를 통합하는 방법은 다음과 같습니다.

1. 커스텀 인증 필터 구현
2. Spring Security 설정에 필터 추가
3. PasetoService 구현
4. Spring Security JWT 지원을 활용한 통합
    - Spring Security의 JWT 지원 메커니즘을 활용하여 PASETO를 통합할 수도 있습니다.
    - 이를 위해 JwtDecoder와 JwtEncoder 인터페이스를 PASETO 구현으로 대체하는 방식입니다.

이 방식을 사용하면 기존 Spring Security의 JWT 관련 기능들을 최대한 활용하면서 PASETO의 보안 이점을 취할 수 있습니다.
PASETO는 JWT보다 더 엄격한 보안 모델을 제공하며, 개발자가 잘못된 보안 결정을 내릴 가능성을 크게 줄여줍니다.
Spring Security와의 통합은 아직 표준화되어 있지 않지만, 위의 접근 방식을 통해 효과적으로 구현할 수 있습니다.

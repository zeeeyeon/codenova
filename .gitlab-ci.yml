stages:
  - build
  - push
  - deploy
  - switch

variables:
  DOCKER_DRIVER: overlay2
  BLUE_PORT_FRONTEND: 3000
  GREEN_PORT_FRONTEND: 3001
  BLUE_PORT_BACKEND: 8080
  GREEN_PORT_BACKEND: 8081
  BLUE_WS_PORT: 9092
  GREEN_WS_PORT: 9093

before_script:
  - echo "$SSH_KEY" > K12E103T.pem
  - chmod 400 K12E103T.pem

frontend-build-and-push:
  stage: build
  tags:
    - deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
  script:
    - echo "ECR 로그인"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_FRONTEND_REPO
    - echo "프론트 빌드"
    - docker build -t $ECR_FRONTEND_REPO:latest ./Front/codenova
    - docker push $ECR_FRONTEND_REPO:latest

backend-build-and-push:
  stage: build
  tags:
    - deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop-be"'
      when: always
  script:
    - echo "ECR 로그인"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BACKEND_REPO
    - echo "백엔드 빌드"
    - docker build -t $ECR_BACKEND_REPO:latest ./Backend
    - docker push $ECR_BACKEND_REPO:latest

deploy-frontend:
  stage: deploy
  tags:
    - deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: always
  script:
    - echo "프론트엔드 Blue-Green 배포"
    - |
      ssh -o StrictHostKeyChecking=no -i K12E103T.pem ubuntu@$EC2_HOST << EOF
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_FRONTEND_REPO
      
        CURRENT="green"
        TARGET="blue"
        TARGET_PORT=$BLUE_PORT_FRONTEND
      
        if docker ps --format '{{.Names}}' | grep -q "frontend-blue"; then
          CURRENT="blue"
          TARGET="green"
          TARGET_PORT=$GREEN_PORT_FRONTEND
        fi
      
        echo "현재 활성 프론트엔드: \$CURRENT, 신규 배포 타겟: \$TARGET (\$TARGET_PORT)"
      
        docker pull $ECR_FRONTEND_REPO:latest || true
        docker stop frontend-\$TARGET 2>/dev/null || true
        docker rm frontend-\$TARGET 2>/dev/null || true
        docker run -d --name frontend-\$TARGET -p \$TARGET_PORT:3000 $ECR_FRONTEND_REPO:latest
      
        echo \$TARGET > /home/ubuntu/frontend_current.txt
        echo \$TARGET_PORT > /home/ubuntu/frontend_port.txt
      
        echo "프론트엔드 \$TARGET 배포 완료"
      EOF

deploy-backend:
  stage: deploy
  tags:
    - deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop-be"'
      when: always
  script:
    - echo "백엔드 Blue-Green 배포"
    - |
      ssh -o StrictHostKeyChecking=no -i K12E103T.pem ubuntu@$EC2_HOST << EOF
        # ECR 로그인
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_BACKEND_REPO
      
        CURRENT="green"
        TARGET="blue"
        TARGET_PORT=$BLUE_PORT_BACKEND
        TARGET_WS_PORT=$BLUE_WS_PORT
      
        if docker ps --format '{{.Names}}' | grep -q "backend-blue"; then
          CURRENT="blue"
          TARGET="green"
          TARGET_PORT=$GREEN_PORT_BACKEND
          TARGET_WS_PORT=$GREEN_WS_PORT
        fi
      
        echo "현재 활성 백엔드: \$CURRENT, 신규 배포 타겟: \$TARGET (API: \$TARGET_PORT, WS: \$TARGET_WS_PORT)"
      
        mkdir -p ~/config
        echo "$APPLICATION_YML" > ~/config/application.yml
      
        docker pull $ECR_BACKEND_REPO:latest || true
        docker stop backend-\$TARGET 2>/dev/null || true
        docker rm backend-\$TARGET 2>/dev/null || true
        docker run -d --name backend-\$TARGET -p \$TARGET_PORT:8080 -p \$TARGET_WS_PORT:9092 \
          -v ~/config/application.yml:/app/config/application.yml \
          -e SPRING_CONFIG_LOCATION=file:/app/config/application.yml \
          $ECR_BACKEND_REPO:latest
      
        echo \$TARGET > /home/ubuntu/backend_current.txt
        echo \$TARGET_PORT > /home/ubuntu/backend_port.txt
        echo \$TARGET_WS_PORT > /home/ubuntu/backend_ws_port.txt
      
        echo "백엔드 \$TARGET 배포 완료"
      EOF

switch-traffic:
  stage: switch
  tags:
    - deploy
  when: manual
  script:
    - echo "트래픽 전환 시작"
    - |
      ssh -o StrictHostKeyChecking=no -i K12E103T.pem ubuntu@$EC2_HOST << EOF
        FRONTEND_TARGET=\$(cat /home/ubuntu/frontend_current.txt 2>/dev/null || echo "blue")
        FRONTEND_PORT=\$(cat /home/ubuntu/frontend_port.txt 2>/dev/null || echo "3000")
      
        BACKEND_TARGET=\$(cat /home/ubuntu/backend_current.txt 2>/dev/null || echo "blue")
        BACKEND_PORT=\$(cat /home/ubuntu/backend_port.txt 2>/dev/null || echo "8080")
        BACKEND_WS_PORT=\$(cat /home/ubuntu/backend_ws_port.txt 2>/dev/null || echo "9092")
      
        echo "트래픽 전환: 프론트엔드=\$FRONTEND_TARGET(\$FRONTEND_PORT), 백엔드=\$BACKEND_TARGET(\$BACKEND_PORT, \$BACKEND_WS_PORT)"
      
        sudo cp /etc/nginx/sites-available/codenova.kr.template /etc/nginx/sites-available/codenova.kr
        sudo sed -i "s/{{FRONTEND_PORT}}/\$FRONTEND_PORT/g" /etc/nginx/sites-available/codenova.kr
        sudo sed -i "s/{{BACKEND_PORT}}/\$BACKEND_PORT/g" /etc/nginx/sites-available/codenova.kr
        sudo sed -i "s/{{WEBSOCKET_PORT}}/\$BACKEND_WS_PORT/g" /etc/nginx/sites-available/codenova.kr
      
        sudo nginx -t && sudo systemctl reload nginx
      
        echo "트래픽 전환 완료"
      EOF